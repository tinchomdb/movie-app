{"version":3,"sources":["features/counter/userSlice.js","Navbar.js","axios.js","requests.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/RegisterScreen.js","screens/SignInScreen.js","screens/LoginScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","Navbar","useState","visible","setVisible","history","useHistory","useSelector","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","to","email","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchActionMovies","fetchAnimatedMovies","fetchCrimeMovies","Banner","movie","setMovie","trailerUrl","setTrailerUrl","invalidTrailerUrl","setInvalidTrailerUrl","a","get","request","data","results","Math","floor","random","length","fetchData","string","n","imgURL","backdrop_path","style","backgroundSize","backgroundImage","backgroundPosition","title","original_name","movieTrailer","tmdbId","id","then","url","urlParams","URLSearchParams","URL","search","catch","console","log","handleClickPlay","PlayArrow","InfoOutlined","videoId","opts","height","width","playerVars","autoplay","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","infinite","speed","slidesToShow","slidesToScroll","responsive","breakpoint","settings","dots","initialSlide","map","poster_path","error","handleClick","HomeScreen","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","RegisterScreen","emailRef","useRef","passwordRef","ref","type","placeholder","e","preventDefault","auth","getAuth","createUserWithEmailAndPassword","current","value","authUser","alert","message","SignInScreen","props","signInWithEmailAndPassword","func","Login","welcome","setWelcome","toggler","setToggler","funcToggler","class","ProfileScreen","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd2d7850.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n/* const initialState = {\r\n  value: 0,\r\n  status: \"idle\",\r\n}; */\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./Navbar.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"./features/counter/userSlice\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar() {\r\n  const [visible, setVisible] = useState(false);\r\n  const history = useHistory();\r\n  const user = useSelector(selectUser);\r\n\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      setVisible(true);\r\n    } else {\r\n      setVisible(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", transitionNavBar);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={\"nav \" + (visible && \"nav__black\")}>\r\n      <div className=\"nav__content\">\r\n        <img\r\n          onClick={() => history.push(\"/\")}\r\n          src=\"https://i.imgur.com/foKfiNv.png\"\r\n          className=\"nav__logo\"\r\n          alt=\"\"\r\n        ></img>\r\n\r\n        <Link to=\"/profile\">\r\n          <div\r\n            className=\"nav__user\" /* onClick={() => history.push(\"/profile\")} */\r\n          >\r\n            <h5>{user.email}</h5>\r\n            <img\r\n              src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n              className=\"nav__avatar\"\r\n              alt=\"\"\r\n            ></img>\r\n          </div>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\",\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = \"be1fa121d423172f18c8cbb8ce63efbd\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchAnimatedMovies: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\r\n  fetchCrimeMovies: `/discover/movie?api_key=${API_KEY}&with_genres=80`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Banner.css\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport { InfoOutlined, PlayArrow } from \"@material-ui/icons\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport YouTube from \"react-youtube\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  const [invalidTrailerUrl, setInvalidTrailerUrl] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchTrending);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(string, n) {\r\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\r\n  }\r\n\r\n  const handleClickPlay = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(null, { tmdbId: movie.id })\r\n        /* movieTrailer(\r\n        movie?.name ||\r\n          movie?.title ||\r\n          movie?.original_name ||\r\n          movie?.original_title ||\r\n          \"\" ) */\r\n\r\n        .then((url) => {\r\n          /* https://www.youtube.com/watch?v=eOrNdBpGMv8&ab_channel=MarvelEntertainment */\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch(() => {\r\n          setInvalidTrailerUrl(true);\r\n          console.log(invalidTrailerUrl);\r\n        });\r\n    }\r\n  };\r\n\r\n  const opts = {\r\n    height: \"300px\",\r\n    width: \"95%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const imgURL = \"https://image.tmdb.org/t/p/w1280/\" + movie?.backdrop_path;\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: \"url(\" + imgURL + \")\",\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n          {movie?.name || movie?.title || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button\r\n            onClick={() => handleClickPlay(movie)}\r\n            className=\"banner__button\"\r\n          >\r\n            {trailerUrl ? (\r\n              <span>\r\n                <CloseIcon />\r\n                Close\r\n              </span>\r\n            ) : (\r\n              <span>\r\n                <PlayArrow />\r\n                Play\r\n              </span>\r\n            )}\r\n          </button>\r\n          <button className=\"banner__button banner__moreInfo\">\r\n            <InfoOutlined />\r\n            More info\r\n          </button>\r\n        </div>\r\n        {trailerUrl && (\r\n          <YouTube\r\n            className=\"banner__youtube\"\r\n            videoId={trailerUrl}\r\n            opts={opts}\r\n          />\r\n        )}\r\n        {invalidTrailerUrl && (\r\n          <h2 className=\"banner__noTrailer\">No trailer Available</h2>\r\n        )}\r\n\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 200)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nimport Slider from \"react-slick\";\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport \"./Row.css\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const baseImgURL = \"https://image.tmdb.org/t/p/w300/\";\r\n\r\n  const opts = {\r\n    height: \"300\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(null, { tmdbId: movie.id })\r\n        /* movieTrailer(\r\n        movie?.name ||\r\n          movie?.title ||\r\n          movie?.original_name ||\r\n          movie?.original_title ||\r\n          \"\" ) */\r\n\r\n        .then((url) => {\r\n          /* https://www.youtube.com/watch?v=eOrNdBpGMv8&ab_channel=MarvelEntertainment */\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  const settings = {\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 10,\r\n    slidesToScroll: 10,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1670,\r\n        settings: {\r\n          slidesToShow: 9,\r\n          slidesToScroll: 9,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 1500,\r\n        settings: {\r\n          slidesToShow: 8,\r\n          slidesToScroll: 8,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 1340,\r\n        settings: {\r\n          slidesToShow: 7,\r\n          slidesToScroll: 7,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 1200,\r\n        settings: {\r\n          slidesToShow: 6,\r\n          slidesToScroll: 6,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 1020,\r\n        settings: {\r\n          slidesToShow: 5,\r\n          slidesToScroll: 5,\r\n          initialSlide: 2,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 860,\r\n        settings: {\r\n          slidesToShow: 4,\r\n          slidesToScroll: 4,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 700,\r\n        settings: {\r\n          slidesToShow: 3,\r\n          slidesToScroll: 3,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 530,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 2,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2 className=\"row__title\">{title}</h2>\r\n\r\n      <Slider {...settings}>\r\n        {movies.map(\r\n          (movie) =>\r\n            ((isLargeRow && movie.poster_path) ||\r\n              (!isLargeRow && movie.backdrop_path)) && (\r\n              <img\r\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                key={movie.id}\r\n                onClick={() => handleClick(movie)}\r\n                src={\r\n                  baseImgURL +\r\n                  (isLargeRow ? movie.poster_path : movie.backdrop_path)\r\n                }\r\n                alt={movie.name}\r\n              ></img>\r\n            )\r\n        )}\r\n      </Slider>\r\n\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport \"./HomeScreen.css\";\r\nimport Navbar from \"../Navbar\";\r\nimport Banner from \"../Banner\";\r\nimport Row from \"../Row\";\r\nimport requests from \"../requests\";\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      <Navbar />\r\n      <Banner />\r\n      <Row\r\n        title=\"Trending Now\"\r\n        fetchUrl={requests.fetchTrending}\r\n        isLargeRow={true}\r\n      />\r\n\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Animated Movies\" fetchUrl={requests.fetchAnimatedMovies} />\r\n      <Row title=\"Crime Movies\" fetchUrl={requests.fetchCrimeMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies} />\r\n      <Row title=\"Romance\" fetchUrl={requests.fetchRomanceMovies} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","/* import { initializeApp } from \"firebase/app\"; */\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAj5nmAS7qgr6cpgduQCMAr38kt17Tsa9c\",\r\n\r\n  authDomain: \"movie-app-22338.firebaseapp.com\",\r\n\r\n  projectId: \"movie-app-22338\",\r\n\r\n  storageBucket: \"movie-app-22338.appspot.com\",\r\n\r\n  messagingSenderId: \"551489037408\",\r\n\r\n  appId: \"1:551489037408:web:38f3b0a13090fb0e700f05\",\r\n};\r\n\r\n/* const firebaseApp = initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n */\r\n/* export { auth }; */\r\nexport default firebaseConfig;\r\n","import \"./RegisterScreen.css\";\r\nimport React, { useRef } from \"react\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\r\nimport firebaseConfig from \"../firebase\";\r\nimport \"./SignInScreen.css\";\r\nimport { useHistory } from \"react-router\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nfunction RegisterScreen() {\r\n  const history = useHistory();\r\n  const emailRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  const signUp = (e) => {\r\n    e.preventDefault();\r\n    const auth = getAuth();\r\n    createUserWithEmailAndPassword(\r\n      auth,\r\n      emailRef.current.value,\r\n      passwordRef.current.value\r\n    )\r\n      .then((authUser) => {\r\n        /* console.log(authUser); */\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"signInScreen\">\r\n      <form>\r\n        <h1>Register</h1>\r\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\r\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\r\n        <button type=\"submit\" onClick={signUp}>\r\n          Register\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RegisterScreen;\r\n","import React, { useRef } from \"react\";\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport firebaseConfig from \"../firebase\";\r\nimport \"./SignInScreen.css\";\r\nimport { useHistory } from \"react-router\";\r\n\r\ninitializeApp(firebaseConfig);\r\n\r\nfunction SignInScreen(props) {\r\n  const history = useHistory();\r\n  const emailRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    const auth = getAuth();\r\n    signInWithEmailAndPassword(\r\n      auth,\r\n      emailRef.current.value,\r\n      passwordRef.current.value\r\n    )\r\n      .then((authUser) => {\r\n        /* console.log(authUser); */\r\n        history.push(\"/\");\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"signInScreen\">\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input ref={emailRef} type=\"email\" placeholder=\"Email\" />\r\n        <input ref={passwordRef} type=\"password\" placeholder=\"Password\" />\r\n        <button type=\"submit\" onClick={signIn}>\r\n          Sign In\r\n        </button>\r\n        <h4>\r\n          <span className=\"signInScreen__gray\">New to Netflix? </span>\r\n          <span\r\n            onClick={() => props.func(false)}\r\n            className=\"signInScreen__signUpLink\"\r\n          >\r\n            Sign up now.\r\n          </span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignInScreen;\r\n","import React, { useState } from \"react\";\r\nimport \"./LoginScreen.css\";\r\nimport RegisterScreen from \"./RegisterScreen\";\r\nimport SignInScreen from \"./SignInScreen\";\r\n\r\nfunction Login() {\r\n  const [welcome, setWelcome] = useState(true);\r\n  const [toggler, setToggler] = useState(true);\r\n\r\n  console.log(\"toggler \" + toggler);\r\n  console.log(\"welcome \" + welcome);\r\n\r\n  function funcToggler(value) {\r\n    setWelcome(false);\r\n    setToggler(value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"loginScreen\">\r\n      <div className=\"loginScreen__gradient\">\r\n        <h1>asd</h1>\r\n        <img\r\n          className=\"loginScreen__logo\"\r\n          src=\"https://i.imgur.com/foKfiNv.png\"\r\n          alt=\"\"\r\n        />\r\n\r\n        <button\r\n          className=\"loginScreen__button\"\r\n          onClick={() => funcToggler(true)}\r\n        >\r\n          Sign in\r\n        </button>\r\n\r\n        {welcome ? (\r\n          <div class=\"content\">\r\n            <h1>Unlimited films, TV programmes and more.</h1>\r\n            <h2>Watch anywhere. Cancel at any time.</h2>\r\n            <h3>Ready to watch? Click the button to start your membership</h3>\r\n            <div className=\"loginScreen__input\">\r\n              <button\r\n                className=\"loginScreen__getStarted\"\r\n                onClick={() => funcToggler(false)}\r\n              >\r\n                GET STARTED\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : toggler ? (\r\n          <SignInScreen func={funcToggler} />\r\n        ) : (\r\n          <RegisterScreen func={funcToggler} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import { getAuth } from \"@firebase/auth\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/counter/userSlice\";\r\nimport Navbar from \"../Navbar\";\r\nimport \"./ProfileScreen.css\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nfunction ProfileScreen() {\r\n  const user = useSelector(selectUser);\r\n  const history = useHistory();\r\n\r\n  function signOut() {\r\n    getAuth().signOut();\r\n    history.push(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"profileScreen\">\r\n      <Navbar />\r\n      <div className=\"profileScreen__body\">\r\n        <h1>Edit Profile</h1>\r\n        <div className=\"profileScreen__info\">\r\n          <img\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n            alt=\"\"\r\n          />\r\n          <div className=\"profileScreen__details\">\r\n            <h2>{user.email}</h2>\r\n            <div className=\"profileScreen__plans\">\r\n              <h3>Plans</h3>\r\n              <button onClick={signOut} className=\"profileScreen__signOut\">\r\n                Sign Out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React, { useEffect } from \"react\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { login, logout, selectUser } from \"./features/counter/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ProfileScreen from \"./screens/ProfileScreen\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const auth = getAuth();\r\n    const unsubscribe = onAuthStateChanged(auth, (userAuth) => {\r\n      if (userAuth) {\r\n        dispatch(\r\n          login({\r\n            uid: userAuth.uid,\r\n            email: userAuth.email,\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n    return unsubscribe;\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <HomeScreen />\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/counter/userSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}